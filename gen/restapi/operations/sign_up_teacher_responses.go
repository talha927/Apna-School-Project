// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/ahab94/ApnaSchool/gen/models"
)

// SignUpTeacherCreatedCode is the HTTP code returned for type SignUpTeacherCreated
const SignUpTeacherCreatedCode int = 201

/*SignUpTeacherCreated teacher added

swagger:response signUpTeacherCreated
*/
type SignUpTeacherCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Teacher `json:"body,omitempty"`
}

// NewSignUpTeacherCreated creates SignUpTeacherCreated with default headers values
func NewSignUpTeacherCreated() *SignUpTeacherCreated {

	return &SignUpTeacherCreated{}
}

// WithPayload adds the payload to the sign up teacher created response
func (o *SignUpTeacherCreated) WithPayload(payload *models.Teacher) *SignUpTeacherCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign up teacher created response
func (o *SignUpTeacherCreated) SetPayload(payload *models.Teacher) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignUpTeacherCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignUpTeacherConflictCode is the HTTP code returned for type SignUpTeacherConflict
const SignUpTeacherConflictCode int = 409

/*SignUpTeacherConflict teacher already exists

swagger:response signUpTeacherConflict
*/
type SignUpTeacherConflict struct {
}

// NewSignUpTeacherConflict creates SignUpTeacherConflict with default headers values
func NewSignUpTeacherConflict() *SignUpTeacherConflict {

	return &SignUpTeacherConflict{}
}

// WriteResponse to the client
func (o *SignUpTeacherConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}

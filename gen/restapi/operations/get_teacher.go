// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTeacherHandlerFunc turns a function with the right signature into a get teacher handler
type GetTeacherHandlerFunc func(GetTeacherParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTeacherHandlerFunc) Handle(params GetTeacherParams) middleware.Responder {
	return fn(params)
}

// GetTeacherHandler interface for that can handle valid get teacher params
type GetTeacherHandler interface {
	Handle(GetTeacherParams) middleware.Responder
}

// NewGetTeacher creates a new http.Handler for the get teacher operation
func NewGetTeacher(ctx *middleware.Context, handler GetTeacherHandler) *GetTeacher {
	return &GetTeacher{Context: ctx, Handler: handler}
}

/*GetTeacher swagger:route GET /teacher/{ID} getTeacher

return teacher based on UUID

*/
type GetTeacher struct {
	Context *middleware.Context
	Handler GetTeacherHandler
}

func (o *GetTeacher) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTeacherParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ahab94/ApnaSchool/gen/models"
)

// AddTeacherReader is a Reader for the AddTeacher structure.
type AddTeacherReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddTeacherReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddTeacherCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewAddTeacherConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddTeacherCreated creates a AddTeacherCreated with default headers values
func NewAddTeacherCreated() *AddTeacherCreated {
	return &AddTeacherCreated{}
}

/*AddTeacherCreated handles this case with default header values.

teacher added
*/
type AddTeacherCreated struct {
	Payload *models.Teacher
}

func (o *AddTeacherCreated) Error() string {
	return fmt.Sprintf("[POST /teacher][%d] addTeacherCreated  %+v", 201, o.Payload)
}

func (o *AddTeacherCreated) GetPayload() *models.Teacher {
	return o.Payload
}

func (o *AddTeacherCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Teacher)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTeacherConflict creates a AddTeacherConflict with default headers values
func NewAddTeacherConflict() *AddTeacherConflict {
	return &AddTeacherConflict{}
}

/*AddTeacherConflict handles this case with default header values.

teacher already exists
*/
type AddTeacherConflict struct {
}

func (o *AddTeacherConflict) Error() string {
	return fmt.Sprintf("[POST /teacher][%d] addTeacherConflict ", 409)
}

func (o *AddTeacherConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

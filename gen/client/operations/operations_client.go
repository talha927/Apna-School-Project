// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SignUpStudent sign up student API
*/
func (a *Client) SignUpStudent(params *SignUpStudentParams) (*SignUpStudentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignUpStudentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SignUpStudent",
		Method:             "POST",
		PathPattern:        "/student/signup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SignUpStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignUpStudentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SignUpStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SignUpTeacher sign up teacher API
*/
func (a *Client) SignUpTeacher(params *SignUpTeacherParams) (*SignUpTeacherCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignUpTeacherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SignUpTeacher",
		Method:             "POST",
		PathPattern:        "/teacher/signup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SignUpTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignUpTeacherCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SignUpTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddStudent add student API
*/
func (a *Client) AddStudent(params *AddStudentParams) (*AddStudentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStudentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStudent",
		Method:             "POST",
		PathPattern:        "/student",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddStudentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddTeacher add teacher API
*/
func (a *Client) AddTeacher(params *AddTeacherParams) (*AddTeacherCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTeacherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTeacher",
		Method:             "POST",
		PathPattern:        "/teacher",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTeacherCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteStudent delete student API
*/
func (a *Client) DeleteStudent(params *DeleteStudentParams) (*DeleteStudentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStudentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStudent",
		Method:             "DELETE",
		PathPattern:        "/student/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStudentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTeacher delete teacher API
*/
func (a *Client) DeleteTeacher(params *DeleteTeacherParams) (*DeleteTeacherNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeacherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeacher",
		Method:             "DELETE",
		PathPattern:        "/teacher/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeacherNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditStudent edit student API
*/
func (a *Client) EditStudent(params *EditStudentParams) (*EditStudentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditStudentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editStudent",
		Method:             "PUT",
		PathPattern:        "/student/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditStudentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditTeacher edit teacher API
*/
func (a *Client) EditTeacher(params *EditTeacherParams) (*EditTeacherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditTeacherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editTeacher",
		Method:             "PUT",
		PathPattern:        "/teacher/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditTeacherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudent return student based on UUID
*/
func (a *Client) GetStudent(params *GetStudentParams) (*GetStudentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStudent",
		Method:             "GET",
		PathPattern:        "/student/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeacher return teacher based on UUID
*/
func (a *Client) GetTeacher(params *GetTeacherParams) (*GetTeacherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeacherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeacher",
		Method:             "GET",
		PathPattern:        "/teacher/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeacherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
